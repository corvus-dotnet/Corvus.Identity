// <copyright file="ServiceIdentityMicrosoftRestTokenProvider.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

namespace Corvus.Identity.ClientAuthentication.MicrosoftRest
{
    using System;
    using System.Net.Http.Headers;
    using System.Threading;
    using System.Threading.Tasks;

    using Corvus.Identity.ClientAuthentication;

    using Microsoft.Rest;

    /// <summary>
    /// A token provider for <c>Microsoft.Rest</c>-based clients that obtains its tokens from
    /// <see cref="IServiceIdentityAccessTokenSource"/>.
    /// </summary>
    public class ServiceIdentityMicrosoftRestTokenProvider : ITokenProvider
    {
        private readonly MicrosoftRestTokenProvider tokenProvider;

        /// <summary>
        /// Create a <see cref="ServiceIdentityMicrosoftRestTokenProvider"/>.
        /// </summary>
        /// <param name="serviceIdentityTokenSource">
        /// Source of tokens representing the host service's identity.
        /// </param>
        /// <param name="scope">
        /// The scope defining the resource access for which we need the tokens (e.g., the app id of
        /// Azure App generated by Easy Auth for the target service).
        /// </param>
        public ServiceIdentityMicrosoftRestTokenProvider(
            IServiceIdentityAccessTokenSource serviceIdentityTokenSource,
            string scope)
            : this(serviceIdentityTokenSource, new[] { scope })
        {
        }

        /// <summary>
        /// Create a <see cref="ServiceIdentityMicrosoftRestTokenProvider"/>.
        /// </summary>
        /// <param name="serviceIdentityTokenSource">
        /// Source of tokens representing the host service's identity.
        /// </param>
        /// <param name="scopes">
        /// The scopes defining the resource access for which we need the tokens (e.g., the app id of
        /// Azure App generated by Easy Auth for the target service).
        /// </param>
        public ServiceIdentityMicrosoftRestTokenProvider(
            IServiceIdentityAccessTokenSource serviceIdentityTokenSource,
            string[] scopes)
        {
            this.tokenProvider = new MicrosoftRestTokenProvider(
                serviceIdentityTokenSource ?? throw new ArgumentNullException(nameof(serviceIdentityTokenSource)),
                scopes);
        }

        /// <summary>
        /// Gets an authentication header value containing an access token.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token.</param>
        /// <returns>A task that produces an authentication header.</returns>
        public Task<AuthenticationHeaderValue?> GetAuthenticationHeaderAsync(CancellationToken cancellationToken)
            => this.tokenProvider.GetAuthenticationHeaderAsync(cancellationToken);
    }
}