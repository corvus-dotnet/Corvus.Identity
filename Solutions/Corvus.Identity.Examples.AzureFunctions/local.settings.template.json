{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "UseDevelopmentStorage=true",
    "FUNCTIONS_WORKER_RUNTIME": "dotnet",

    // To use a specific principle as the service identity, do this:
    // "AzureServicesAuthConnectionString": "RunAs=App;AppId=<appid>;TenantId=<tenantid>;AppKey=<clientSecret>",
    "AzureServicesAuthConnectionString": "",

    "ExampleSettings:KeyVaultUri": "https://<yourvault>.vault.azure.net/",
    "ExampleSettings:KeyVaultSecretName": "TenancyAccountKey",
    "ExampleSettings:KeyVaultClientIdentity:IdentitySourceType": "AzureIdentityDefaultAzureCredential",

    // Determines the Azure Subscription that the UseMicrosoftRestFunction and UsePlainTokensFunction attempt to inspect
    "ExampleSettings:AzureSubscriptionId": "<azureSubId>",

    // These settings are used by the UseMicrosoftRestFunction.UseConfiguredAsync 
    "ExampleSettings:ArmClientIdentity:IdentitySourceType": "ClientIdAndSecret",
    "ExampleSettings:ArmClientIdentity:AzureAdAppTenantId": "<tenantid>",
    "ExampleSettings:ArmClientIdentity:AzureAdAppClientId": "<appid>",
    // ...and you could either set the client secret directly as plain text in the config:
    // "ExampleSettings:ArmClientIdentity:AzureAdAppClientSecretPlainText": "<clientSecret>",
    // ...or you could load the client secret from Azure Key Vault
    "ExampleSettings:ArmClientIdentity:AzureAdAppClientSecretInKeyVault:VaultName": "<keyVaultName>",
    "ExampleSettings:ArmClientIdentity:AzureAdAppClientSecretInKeyVault:SecretName": "<nameOfSecretContainingAdAppClientSecret>",
    "ExampleSettings:ArmClientIdentity:AzureAdAppClientSecretInKeyVault:VaultClientIdentity:IdentitySourceType": "AzureIdentityDefaultAzureCredential",

    // Determines the mechanism used by the examples that use the Service Identity.
    "ExampleSettings:ServiceIdentity:IdentitySourceType": "AzureIdentityDefaultAzureCredential"
  }
}